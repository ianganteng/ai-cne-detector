# -*- coding: utf-8 -*-
"""AiCNE_Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wt1RLh7l7PwYfzFFVXnXcbhxFd_NV-u-
"""


#Latest Version
import gradio as gr
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.inception_v3 import preprocess_input
import gdown

# Download model dari Google Drive
file_id = '10LuyD0erYpFO2D4dN_BYoBQU9sblpLNL'
gdown.download(f"https://drive.google.com/uc?export=download&id={file_id}", "AiCNE_FIX.keras", quiet=False)

# Load model
model = load_model("AiCNE_FIX.keras")

# Labels dan saran pengobatan untuk deteksi acne
acne_labels = {
    0: 'Clear',
    1: 'Comedo',
    2: 'Acne'
}

acne_treatment = {
    0: 'Keep up the good work!',
    1: '- Benzoyl peroxide\n- Azelaic acid\n- Salicylic acid +/- sulfur and resorcinol\n- Glycolic acid\n- Retinoids such as tretinoin, isotretinoin, adapalene (these require a doctorâ€™s prescription)',
    2: '- Topical anti-acne agents, such as benzoyl peroxide, azelaic acid, and tretinoin or adapalene gel and some antibiotics (clindamycin)\n- New bioactive proteins may also prove successful\n- Newer topical agents such as clascoterone\n- Low-dose combined oral contraceptive\n- Antiseptic or keratolytic washes containing salicylic acid\n- Light/laser therapy'
}

def detect_acne(image):
    # Mengubah ukuran gambar menjadi 299x299 piksel
    image_resized = cv2.resize(image, (299, 299))

    # Menyiapkan gambar dalam format yang sesuai untuk model
    # - Menambahkan dimensi batch (1, 299, 299, 3)
    # - Melakukan preprocessing
    input_data = preprocess_input(np.expand_dims(image_resized, axis=0))

    # Menggunakan model untuk memprediksi probabilitas kelas jerawat
    predictions = model.predict(input_data)

    # Menemukan indeks kelas dengan probabilitas tertinggi
    max_index = np.argmax(predictions[0])

    # Mendapatkan label jerawat berdasarkan indeks prediksi
    detection = acne_labels[max_index]

    # Mendapatkan rekomendasi perawatan untuk jerawat yang terdeteksi
    treatment = acne_treatment[max_index]

    # Mengembalikan hasil deteksi dan rekomendasi perawatan
    return detection, treatment
# Gradio Blocks
with gr.Blocks(
    css="""

    @import url('https://fonts.googleapis.com/css2?family=Instrument+Sans:wght@400;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Itim&display=swap');

    body, html {
        height: 100%;
        margin: 0;
    }

    .gradio-container {
        background: linear-gradient(to bottom, #FFA500, #1E90FF);
        color: white;
        min-height: 100vh;
    }

    #footer {
        position: fixed;
        bottom: 0;
        left: 20px;
        width: 100%;
        color: white;
        text-align: left;
        padding: 10px 0;
        font-size: 14px;
        z-index: 1000;
    }

    #background-image {
        position: static;
        top: 0;
        left: 0;
        z-index: -1;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 1;
    }


    h1 {
        font-family: 'Instrument Sans', sans-serif;
        font-size: 4em;
        color: white;
    }
    p {
        font-family: 'Instrument Sans', sans-serif;
        font-size: 25px;
    }
    """
) as demo:

    with gr.Tab("About AiCNE"):
        gr.Markdown(
            """
            <h1>Welcome to AiCNE</h1>
            <p>Discover <b>your personalized skin analysis</b> powered by advanced AI technology!</p>
            <p> - Upload a clear image of your face.</p>
            <p> - Instantly analyze and classify acne types.</p>
            <p> - Get actionable treatment suggestions tailored just for you.</p>
            <p>Take a step closer to understanding your skin and achieving <b>confidence in your natural beauty</b>.</p>
            """
        )
        #gr.Markdown(
        #    """
        #    <img id="background-image" src="https://drive.google.com/uc?export=download&id=1VnU2O71gp74KvT4lAijxOfnXuKdv2zyw" alt="M8301349.jpg">
        #     """
        #)

    with gr.Tab("What & Why AiCNE"):
        gr.Markdown(
            """
            <h1> ðŸ¤– What is AiCNE? </h1>
            <p>AiCNE is a cutting-edge <b>AI-powered tool</b> designed to help you understand and manage your skin condition effortlessly.</p>
            <p>Using <b>state-of-the-art AI models</b>, AiCNE offers quick, reliable acne detection and treatment advice.</p>

            <h1> ðŸŒŸ Why use AiCNE? </h1>
            <p>- <b>Fast and Accurate</b>: Get results in seconds with high precision.</p>
            <p>- <b>User-Friendly</b>: Designed for everyone, from teens to adults.</p>
            <p>- <b>Actionable Insights</b>: Receive expert-backed treatment suggestions tailored to your skin type.</p>
            <br>
            <p>With AiCNE, youâ€™re just one step away from <b>healthier, clearer skin</b>! ðŸ’– </p>
            """
        )

    with gr.Tab("Try AiCNE Now"):
        gr.Markdown(
            """
            <h1> AiCNE DETECTOR </h1>
            """
        )
        with gr.Row():
            with gr.Column():
                image_input = gr.Image(type="numpy", label="Upload your image")
            with gr.Column():
                result = gr.Textbox(label="Detection Result")
                treatment = gr.Textbox(label="Suggested Treatment")
        with gr.Row():
            detect_button = gr.Button("Start Detecting")
            clear_button = gr.Button("Clear Input")

        # Untuk tombol Detect dan Clear
        detect_button.click(detect_acne, inputs=image_input, outputs=[result, treatment])
        clear_button.click(
            lambda: (None, "", ""),  # Reset input image and output fields
            inputs=[],
            outputs=[image_input, result, treatment]
        )

    with gr.Row():
        gr.Markdown(
            """
            <div id="footer">
                Created by <strong>AiCNE.id</strong> | &copy; 2024 All Rights Reserved.
            </div>
            """,
            elem_id="footer"
        )

demo.launch()

#scroll version
import tensorflow as tf
from tensorflow.keras.models import load_model
import gradio as gr
import cv2
import numpy as np
from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input
import gdown

# Download model dari Google Drive
file_id = '10LuyD0erYpFO2D4dN_BYoBQU9sblpLNL'
gdown.download(f"https://drive.google.com/uc?export=download&id={file_id}", "AiCNE_FIX.keras", quiet=False)

# Load model
model = load_model("AiCNE_FIX.keras")

# Labels dan saran pengobatan untuk deteksi acne
acne_labels = {
    0: 'Clear',
    1: 'Comedo',
    2: 'Acne'
}

acne_treatment = {
    0: 'Keep up the good work! ',
    1: '- Benzoyl peroxide\n- Azelaic acid\n- Salicylic acid +/- sulfur and resorcinol\n- Glycolic acid\n- Retinoids such as tretinoin, isotretinoin, adapalene (these require a doctors prescription)',
    2: '- Topical anti-acne agents, such as benzoyl peroxide, azelaic acid, and tretinoin or adapalene gel and some antibiotics (clindamycin)\n- New bioactive proteins may also prove successful\n- Newer topical agents such as clascoterone\n- Low-dose combined oral contraceptive\n- Antiseptic or keratolytic washes containing salicylic acid\n- Light/laser therapy'
}

# Fungsi untuk mendeteksi acne
def detect_acne(image, threshold=0.4):
    # Resize gambar menjadi 299x299 piksel agar sesuai dengan ukuran input model
    image_resized = cv2.resize(image, (299, 299))

    # Proses gambar dengan preprocess_input untuk menyesuaikan format input model
    input_data = preprocess_input(np.expand_dims(image_resized, axis=0))  # Menambah dimensi untuk batch

    # Mendapatkan prediksi dari model
    predictions = model.predict(input_data)

    # Menemukan indeks kelas dengan probabilitas tertinggi
    max_index = np.argmax(predictions[0])  # Indeks dengan probabilitas tertinggi
    max_prob = predictions[0][max_index]  # Nilai probabilitas tertinggi

    # Inisialisasi variabel untuk hasil deteksi dan saran pengobatan
    detections = []  # Daftar untuk menyimpan label deteksi (misalnya 'Acne', 'Clear', 'Comedo')
    treatment_suggestion = ""  # Saran pengobatan yang sesuai

    # Jika probabilitas tertinggi lebih besar dari threshold, deteksi berhasil
    if max_prob > threshold:
        detections.append(acne_labels[max_index])  # Menambahkan label deteksi ke dalam daftar
        treatment_suggestion = acne_treatment[max_index]  # Mendapatkan saran pengobatan berdasarkan deteksi

    # Mengembalikan hasil: gambar yang sudah dianotasi, hasil deteksi, dan saran pengobatan
    return detections, treatment_suggestion


# CSS untuk mempercantik tampilan antarmuka
custom_css = """
@import url('https://fonts.googleapis.com/css2?family=Itim&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Instrument+Sans:wght@400;700&display=swap');
body {
    background: linear-gradient(to bottom, #FFA500, #1E90FF);
    color: #ffffff !important;
    margin: 0;
    padding: 0;
    overflow: hidden;
}

.gradio-container {
    max-height: 90vh;
    overflow-y: auto;
    background: transparent !important;
    color: #ffffff !important;
    border-radius: 12px;
    text-align: center;
    box-sizing: border-box;
    padding: 10px;
}

.gradio-container .wrap h1 {
    font-size: 100px !important;
    font-family: 'Itim', cursive !important;
    font-weight: bold !important;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    color: #000000 !important;
}

h2 {
    font-size: 40px;
    font-family: 'Instrument Sans', sans-serif;
    font-weight: bold;
    color: #000000;
    text-align: center;
}

p {
    font-size: 30px;
    font-family: 'Instrument Sans', sans-serif;
    font-weight: bold;
    color: #000000;
    text-align: center;
}

.gradio-container .wrap {
    font-size: 40px !important;
    line-height: 1.6;
    padding: 20px
}

.output-textbox textarea {
    background-color: #1e1e1e !important;
    color: #ffffff !important;
    border: 2px solid #000000;
    font-weight: bold;
    font-size: 16px;
    padding: 10px;
    border-radius: 8px;
}

.gradio-container::-webkit-scrollbar {
    width: 12px;
}

.gradio-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 6px;
}

.gradio-container::-webkit-scrollbar-thumb {
    background: #D3D3D3;
    border-radius: 6px;
    border: #555555;
}

.gradio-container::-webkit-scrollbar-thumb:active {
    background: #555555;
    border: #555555;
}
"""

interface = gr.Interface(
    fn=detect_acne,
    inputs=gr.Image(type="numpy", label="Upload an image"),
    outputs=[
        gr.Textbox(label="Detection Result"),
        gr.Textbox(label="Treatment Suggestion")
    ],
    title="ðŸŒŸ AiCNE ðŸŒŸ",
    description=(
        "<div style='text-align: center;'>"
        "<h2>Welcome to <b>AiCNE</b>, your AI-powered assistant for acne detection!</h2>"
        "<h2>Upload a clear image of your face to analyze and classify acne types.</h2>"
        "<h2><b>Get instant results</b> and take a step closer to understanding your skin!</h2>"
        "<br>"
        "<br>"
        "<h2>What is AiCNE?</h2>"
        "<p>AiCNE is an AI-Powered Acne Detection tool, a smart solution to understand your skin condition with AI Technology.</p>"
        "<br>"
        "<h2>Why use AiCNE?</h2>"
        "<p>AiCNE detects acne within seconds with high accuracy, offering a user-friendly interface for your convenience.</p>"
        "<br>"
        "<br>"
        "</div>"
    ),
    css=custom_css,
)

interface.launch()
